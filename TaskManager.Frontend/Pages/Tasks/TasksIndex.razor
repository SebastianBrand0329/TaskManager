@page "/tasks"
@inject IRepository repository
@inject SweetAlertService sweeAlertService
@inject NavigationManager navigationManager


<h3>Tasks</h3>

@if (tasks is null)
{
    <p>Cargando...</p>
}
else
{
    <a class="btn btn-outline-primary" href="/tasks/create">New Task</a>


    <table class="table ">
        <thead>
            <tr>
                <th>Description</th>
                <th>Date</th>
                <th>IsComplete</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Description</td>
                    <td>@($"{task.Date:yyyy/MM/dd}")</td>
                    <td>@task.IsComplete</td>
                    <td>
                        <a href="/tasks/edit/@task.Id" class="btn btn-outline-warning">Edit</a>
                        <button class="btn btn-outline-info" @onclick=@(()=> Complete(task))>Complete</button>
                        <button class="btn btn-outline-danger" @onclick=@(()=> Delete(task))>Delete</button>
                    </td>
                </tr>
            }

        </tbody>

    </table>
}

@code {
    public List<MyTask>? tasks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<MyTask>>("api/mytasks");

        if (responseHttp.IsSuccess)
        {
            tasks = responseHttp.Result;
        }
    }

    private async Task Delete(MyTask task)
    {
        var result = await sweeAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<MyTask>($"api/mytasks/{task.Id}");

        await LoadAsync();

        var toast = sweeAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowCloseButton = true,
                Timer = 3000
            });

        await toast.FireAsync(icon: SweetAlertIcon.Info, message: "Tasks delete successfully");


    }

    private async Task Complete(MyTask task)
    {
        var result = await sweeAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas completar la tarea?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        task.IsComplete = true;
        var responseHttp = await repository.PutAsync<MyTask>($"api/mytasks", task);

        await LoadAsync();

        var toast = sweeAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowCloseButton = true,
                Timer = 3000
            });

        await toast.FireAsync(icon: SweetAlertIcon.Info, message: "Tasks Completed successfully");


    }
}